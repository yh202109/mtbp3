:py:mod:`mtbp3`
===============

.. py:module:: mtbp3

.. autoapi-nested-parse::

   This module is the entry point for the mtbp3 package.
   It imports all the functions and classes from the util module.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   util/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   mtbp3.LsrTree
   mtbp3.Emt
   mtbp3.catPlotter



Functions
~~~~~~~~~

.. autoapisummary::

   mtbp3.diff_2cols_in_1df
   mtbp3.diff_2cols_in_2df
   mtbp3.summarize_1nc_by_2group
   mtbp3.get_data



Attributes
~~~~~~~~~~

.. autoapisummary::

   mtbp3.emt
   mtbp3.__version__
   mtbp3._ROOT


.. py:class:: LsrTree(path='', outfmt='list', with_counts=False, count_str='', with_file_label=False, label_str='')


   .. py:method:: list_files()

      List files in the specified directory based on the output format.

      :returns: The list of files, JSON string, or DataFrame based on the output format.
      :rtype: list or str or pd.DataFrame

      .. rubric:: Examples

      >>> lsr = LsrTree("/path/to/directory", outfmt="list")
      >>> lsr.list_files()
      ['file1.txt', 'file2.txt', 'file3.txt']


   .. py:method:: list_files_json()

      List files in the specified directory and return the result as a JSON string.

      :returns: The JSON string representing the file list.
      :rtype: str


   .. py:method:: list_files_list()

      List files in the specified directory and return the result as a list.

      :returns: The list of files.
      :rtype: list


   .. py:method:: list_files_dataframe()

      List files in the specified directory and return the result as a pandas DataFrame.

      :returns: The DataFrame representing the file list.
      :rtype: pd.DataFrame


   .. py:method:: list_files_string()

      List files in the specified directory using the default output format.

      :returns: The file list as a string.
      :rtype: str


   .. py:method:: list_files_tree()

      List files in the specified directory and return the result as a tree structure.

      :returns: The tree structure representing the file list.
      :rtype: str



.. py:class:: Emt(folder_name='')


   A class representing MedDRA terms.

   This class provides methods to interact with the Emt object,
   including listing files associated with the Emt.

   .. attribute:: folder_name

      The folder name associated with the Emt.

      :type: str

   .. attribute:: lsr

      An instance of the LsrTree class for listing files.

      :type: LsrTree

   .. attribute:: month

      The month of the version published.

      :type: str

   .. attribute:: year

      The year of the version published.

      :type: str

   .. py:method:: expected_file_lists()

      Get the three lists of files associated with the Emt.

      :returns: A tuple containing three lists of file names.
      :rtype: tuple


   .. py:method:: find_files()

      Find all expected files associated with the Emt.

      :returns: A list of missing file names.
      :rtype: list


   .. py:method:: load_llt(unique=True)


   .. py:method:: list_files()

      List all files associated with the Emt.

      :returns: A list of file names.
      :rtype: list


   .. py:method:: find_soc(terms=[], ignore_case=False)

      Find all unique SOC (System Organ Class) terms.

      :param terms: The specific SOC name(s) to filter the results. Defaults to an empty list.
      :type terms: list, optional
      :param ignore_case: Flag to indicate whether to ignore case sensitivity when filtering terms. Defaults to False.
      :type ignore_case: bool, optional

      :returns: A list of unique SOC terms. If terms is provided, it returns the corresponding ids.
      :rtype: list

      :raises AssertionError: If terms is not a list.


   .. py:method:: find_hlgt(terms=[], ignore_case=False)

      Find all unique HLGT terms.

      :param terms: The specific HLGT name(s) to filter the results. Defaults to an empty list.
      :type terms: list, optional
      :param ignore_case: Flag to indicate whether to ignore case sensitivity when filtering terms. Defaults to False.
      :type ignore_case: bool, optional

      :returns: A list of unique HLGT terms. If terms is provided, it returns the corresponding ids.
      :rtype: list

      :raises AssertionError: If terms is not a list.


   .. py:method:: find_hlt(terms=[], ignore_case=False)

      Find all unique HLT terms.

      :param terms: The specific HLT name(s) to filter the results. Defaults to an empty list.
      :type terms: list, optional
      :param ignore_case: Flag to indicate whether to ignore case sensitivity when filtering terms. Defaults to False.
      :type ignore_case: bool, optional

      :returns: A list of unique HLT terms. If terms is provided, it returns the corresponding ids.
      :rtype: list

      :raises AssertionError: If terms is not a list.


   .. py:method:: find_pt(terms=[], ignore_case=False)

      Find all unique PT terms.

      :param terms: The specific PT name(s) to filter the results. Defaults to an empty list.
      :type terms: list, optional
      :param ignore_case: Flag to indicate whether to ignore case sensitivity when filtering terms. Defaults to False.
      :type ignore_case: bool, optional

      :returns: A list of unique PT terms. If terms is provided, it returns the corresponding ids.
      :rtype: list

      :raises AssertionError: If terms is not a list.


   .. py:method:: find_llt(terms=[], ignore_case=False, llt_current_only=True)

      Find all unique LLT terms.

      :param terms: The specific LLT name(s) to filter the results. Defaults to an empty list.
      :type terms: list, optional
      :param ignore_case: Flag to indicate whether to ignore case sensitivity when filtering terms. Defaults to False.
      :type ignore_case: bool, optional

      :returns: A list of unique LLT terms. If terms is provided, it returns the corresponding ids.
      :rtype: list

      :raises AssertionError: If terms is not a list.


   .. py:method:: all_str_digit(lst=[])

      Check if all elements in a given list are strings containing only digits.

      :param fin: The list to check.
      :type fin: list

      :returns: True if all elements in the list are strings containing only digits, False otherwise.
      :rtype: bool


   .. py:method:: assert_terms(input, remove_none=False)

      Assert that the input is either a string or a list.
      If the input is a string, it is converted to a length one list.
      All elements in the list are converted to strings and empty elements are removed.

      :param input: The input to be validated.
      :type input: str or list

      :returns: The validated list.
      :rtype: list

      :raises AssertionError: If the input is neither a string nor a list.


   .. py:method:: find_term_wi_level(terms=[], ignore_case=False, level=1, llt_current_only=True)

      Find all unique terms.

      :param terms: The specific SOC name(s) to filter the results. Defaults to an empty list.
      :type terms: list, optional
      :param ignore_case: Flag to indicate whether to ignore case sensitivity when filtering terms. Defaults to False.
      :type ignore_case: bool, optional
      :param level: The level of the SOC hierarchy to consider. Defaults to 1.
      :type level: int, optional

      :returns: A list of unique terms. If terms is provided, it returns the corresponding ids.
      :rtype: list

      :raises AssertionError: If terms is not a list.


   .. py:method:: find_pt_given_soc(soc=[], primary_soc_only=False, ignore_case=False)

      Find all PTs (Preferred Terms) given a SOC (System Organ Class) name.

      :param soc: The name of the SOC or a list of SOC names.
      :type soc: str or list
      :param primary_soc_only: If True, only return PTs associated with the primary SOC.
                               Defaults to False.
      :type primary_soc_only: bool, optional

      :returns:

                A DataFrame containing the PTs associated with the given SOC.
                                    Each row represents a PT and contains the PT code and PT name.
      :rtype: pandas.DataFrame


   .. py:method:: find_llt_given_pt(pt=[], ignore_case=False, llt_current_only=True)

      Find all LLTs (Lowest Level Terms) given a PT (Preferred Term) name or a list of PT names.

      :param pt: The name of the PT or a list of PT names.
      :type pt: str or list

      :returns:

                A DataFrame containing the LLTs associated with the given PT(s).
                                    Each row represents an LLT and contains the LLT code and LLT name.
      :rtype: pandas.DataFrame


   .. py:method:: find_llt_given_soc(soc=[], primary_soc_only=False, ignore_case=False, llt_current_only=True)

      Find all LLTs (Lowest Level Terms) given a SOC (System Organ Class) name.

      :param soc_name: The name of the SOC.
      :type soc_name: str
      :param primary_soc_only: If True, only return LLTs associated with the primary SOC.
                               Defaults to False.
      :type primary_soc_only: bool, optional

      :returns:

                A DataFrame containing the LLTs associated with the given SOC.
                                    Each row represents an LLT and contains the LLT code and LLT name.
      :rtype: pandas.DataFrame


   .. py:method:: find_soc_given_pt(pt=[], primary_only=True, ignore_case=False)

      Find the SOC (System Organ Class) given a list of PT (Preferred Term) names.

      :param pt: A list of PT names.
      :type pt: list

      :returns: The name of the primary SOC.
      :rtype: str

      :raises AssertionError: If pt is not a list.


   .. py:method:: load_smq()


   .. py:method:: find_smq(terms=[], with_detail=False, ignore_case=False)

      Find all unique SMQ (Standard MedDRA Queries) terms.

      :param terms: The specific SMQ name(s) to filter the results. Defaults to an empty list.
      :type terms: list, optional
      :param ignore_case: Flag to indicate whether to ignore case sensitivity when filtering terms. Defaults to False.
      :type ignore_case: bool, optional

      :returns: A list of unique SMQ terms. If terms is provided, it returns the corresponding ids.
      :rtype: list

      :raises AssertionError: If terms is not a list.


   .. py:method:: find_terms_given_smq(smq=[], ignore_case=False, active_only=True, narrow_only=True, llt_only=False, llt_current_only=True)

      Find all terms related an SMQ (Standard MedDRA Query) name or a list of SMQ names.

      :param smq: The name of the SMQ or a list of SMQ names.
      :type smq: str or list
      :param ignore_case: Flag to indicate whether to ignore case sensitivity when filtering terms. Defaults to False.
      :type ignore_case: bool, optional

      :returns: A DataFrame containing the terms associated with the given SMQ(s).
      :rtype: pandas.DataFrame


   .. py:method:: find_terms_given_smq_sub(subset_df, keep_columns, llt_only, llt_current_only)


   .. py:method:: load_fmq_default()


   .. py:method:: load_fmq()


   .. py:method:: find_fmq_file(file_path='')


   .. py:method:: save_fmq_consolidated_list_csv(folder_path='')

      Save the CSV file in the specified folder.

      :param folder_path: The path of the folder where the CSV file should be saved.
      :type folder_path: str


   .. py:method:: find_fmq(fmq=[], narrow_only=True)

      Find all unique FMQ (FDA Medical Queries) terms.

      :param fmq: The specific FMQ name(s) to filter the results. Defaults to an empty list.
      :type fmq: list, optional

      :returns: A list of unique FMQ terms. If fmq is provided, it returns the corresponding ids.
      :rtype: list

      :raises AssertionError: If fmq is not a list.


   .. py:method:: find_terms_given_fmq(fmq=[], ignore_case=False, narrow_only=True)

      Find all terms related to an FMQ (FDA Medical Query) name or a list of FMQ names.

      :param fmq: The name of the FMQ or a list of FMQ names.
      :type fmq: str or list
      :param ignore_case: Flag to indicate whether to ignore case sensitivity when filtering terms. Defaults to False.
      :type ignore_case: bool, optional

      :returns: A DataFrame containing the terms associated with the given FMQ(s).
      :rtype: pandas.DataFrame



.. py:data:: emt

   

.. py:function:: diff_2cols_in_1df(df, col1='ARM', col2='ACTARM', keep_diff_only=False)

   Calculate the difference between two columns in a DataFrame.

   :param df: The DataFrame containing the columns to compare.
   :type df: pandas.DataFrame
   :param col1: The name of the first column to compare. Default is 'ARM'.
   :type col1: str
   :param col2: The name of the second column to compare. Default is 'ACTARM'.
   :type col2: str

   :returns: If there is a difference between the two columns,
             a DataFrame is returned with the unique combinations of values in col1 and col2,
             along with a 'diff' column indicating whether the values are different ('True') or not ('').
             If there is no difference between the two columns, the string "The two columns are the same." is returned.
   :rtype: pandas.DataFrame or str


.. py:function:: diff_2cols_in_2df(df1, df2, col, gp)

   Check if a column exists in both dataframes.

   :param df1: The first dataframe.
   :type df1: pandas.DataFrame
   :param df2: The second dataframe.
   :type df2: pandas.DataFrame
   :param col: The column to check.
   :type col: str
   :param gp: The group column.
   :type gp: str

   :returns: True if the column exists in both dataframes, False otherwise.
   :rtype: bool


.. py:function:: summarize_1nc_by_2group(df=None, column='', cutoff=None, group_col0='', group_col1='', to_cat=True)

   Create a summary dataframe that shows the percentage of NaN values and values less than a cutoff point in a numerical column.

   :param df: The input dataframe.
   :type df: pandas.DataFrame
   :param column: The name of the numerical column.
   :type column: str
   :param cutoff: The cutoff point.
   :type cutoff: float
   :param group_col0: The first group column.
   :type group_col0: str
   :param group_col1: The second group column.
   :type group_col1: str
   :param to_cat: Whether to categorize the column based on the cutoff point.
   :type to_cat: bool

   :returns: A summary dataframe with two columns: 'NaN Percentage' and 'Below Cutoff Percentage', pivoted by group_col1.
   :rtype: pandas.DataFrame

   :raises ValueError: If the input is not a DataFrame or if the column is not a string or does not exist in the DataFrame.
   :raises ValueError: If the group_col0 or group_col1 is not a string or does not exist in the DataFrame.
   :raises ValueError: If the column is not a numerical column.


.. py:class:: catPlotter(df, y_col, group_col=None, grid_col=None, grid_wrap=None, x_col=None, pt_size=5, y_scale_base=0, x_scale_base=0, title='', fig_size_0=7, fig_size_1=6, point_position='swarm', x_label_rotate=None, grid_kws=None)


   A class for creating categorical box plots and strip plots.

   Parameters:
   - df (pandas.DataFrame): The input DataFrame.
   - group_col (str): The column name for grouping the data.
   - y_col (str): The column name for the y-axis variable.
   - x_col (str): The column name for the x-axis variable.
   - grid_col (str, optional): The column name for creating subplots based on a grid. Default is None.
   - grid_wrap (int, optional): The number of columns in the grid. Default is None.
   - pt_size (int, optional): The size of the points in the strip plot. Default is 5.
   - x_scale_base (int, optional): The base for the x-axis scale. Default is 10.
   - title (str, optional): The title of the plot. Default is an empty string.
   - fig_size_0 (int, optional): The width of the figure. Default is 7.
   - fig_size_1 (int, optional): The height of the figure. Default is 6.
   - grid_kws (dict, optional): Additional keyword arguments for the FacetGrid. Default is None.

   Methods:
   - update_parameters(**kwargs): Update the parameters of the catPlotter instance.
   - boxplot(): Create a categorical box plot and strip plot.
   - lineplot(): Create a line plot by categorical group_col on the x-axis with grid option.
   - generate_example_dataset(): Generate an example dataset.

   Raises:
   - ValueError: If an invalid parameter is provided or if group_col, x_col, or y_col is not found in DataFrame columns.

   .. py:method:: update_parameters(**kwargs)

      Update the parameters.

      Parameters:
      - kwargs (dict): The keyword arguments to update the parameters.

      Raises:
      - ValueError: If an invalid parameter is provided.


   .. py:method:: boxplot()

      Create a categorical box plot and strip plot.

      Raises:
      - ValueError: If group_col or y_col is not found in DataFrame columns.


   .. py:method:: generate_example_dataset()
      :staticmethod:

      Generate an example dataset.

      :returns: The example dataset.
      :rtype: pandas.DataFrame


   .. py:method:: lineplot()

      Create a line plot by categorical group_col on the x-axis with grid option.

      Raises:
      - ValueError: If group_col or y_col is not found in DataFrame columns.



.. py:data:: __version__

   

.. py:data:: _ROOT

   

.. py:function:: get_data(path)


