:py:mod:`mtbp3.util`
====================

.. py:module:: mtbp3.util


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   cdt/index.rst
   lsr/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   mtbp3.util.LsrTree



Functions
~~~~~~~~~

.. autoapisummary::

   mtbp3.util.diff_2cols_in_1df
   mtbp3.util.diff_2cols_in_2df



Attributes
~~~~~~~~~~

.. autoapisummary::

   mtbp3.util.lsr
   mtbp3.util.df


.. py:class:: LsrTree(path='', outfmt='list', with_counts=False, count_str='', with_file_label=False, label_str='')


   .. py:method:: list_files()

      List files in the specified directory based on the output format.

      :returns: The list of files, JSON string, or DataFrame based on the output format.
      :rtype: list or str or pd.DataFrame

      .. rubric:: Examples

      >>> lsr = LsrTree("/path/to/directory", outfmt="list")
      >>> lsr.list_files()
      ['file1.txt', 'file2.txt', 'file3.txt']


   .. py:method:: list_files_json()

      List files in the specified directory and return the result as a JSON string.

      :returns: The JSON string representing the file list.
      :rtype: str


   .. py:method:: list_files_list()

      List files in the specified directory and return the result as a list.

      :returns: The list of files.
      :rtype: list


   .. py:method:: list_files_dataframe()

      List files in the specified directory and return the result as a pandas DataFrame.

      :returns: The DataFrame representing the file list.
      :rtype: pd.DataFrame


   .. py:method:: list_files_string()

      List files in the specified directory using the default output format.

      :returns: The file list as a string.
      :rtype: str


   .. py:method:: list_files_tree()

      List files in the specified directory and return the result as a tree structure.

      :returns: The tree structure representing the file list.
      :rtype: str


   .. py:method:: list_files_tree_simple()

      List files in the specified directory and return the result as a tree structure.

      :returns: The tree structure representing the file list.
      :rtype: str



.. py:data:: lsr

   

.. py:function:: diff_2cols_in_1df(df, col1='ARM', col2='ACTARM', keep_diff_only=False)

   Calculate the difference between two columns in a DataFrame.

   :param df: The DataFrame containing the columns to compare.
   :type df: pandas.DataFrame
   :param col1: The name of the first column to compare. Default is 'ARM'.
   :type col1: str
   :param col2: The name of the second column to compare. Default is 'ACTARM'.
   :type col2: str

   :returns: If there is a difference between the two columns,
             a DataFrame is returned with the unique combinations of values in col1 and col2,
             along with a 'diff' column indicating whether the values are different ('True') or not ('').
             If there is no difference between the two columns, the string "The two columns are the same." is returned.
   :rtype: pandas.DataFrame or str


.. py:function:: diff_2cols_in_2df(df1, df2, col, gp)

   Check if a column exists in both dataframes.

   :param df1: The first dataframe.
   :type df1: pandas.DataFrame
   :param df2: The second dataframe.
   :type df2: pandas.DataFrame
   :param col: The column to check.
   :type col: str
   :param gp: The group column.
   :type gp: str

   :returns: True if the column exists in both dataframes, False otherwise.
   :rtype: bool


.. py:data:: df

   

