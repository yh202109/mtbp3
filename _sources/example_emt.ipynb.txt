{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\n",
                "# MedDRA - Start with Distribution Files \n",
                "\n",
                "\n",
                "The Medical Dictionary for Regulatory Activities (MedDRA) is a set of standardized terminologies commonly used in clinical safety recording, communicating, and reporting activities.  MedDRA is developed and maintained by the International Council for Harmonisation of Technical Requirements for Pharmaceuticals for Human Use (ICH)[^1]<sup>,</sup>[^2]. The module `emt` includes basic functions for processing MedDRA distribution folder to get information of terms and processing data already coded in MedDRA to further use those data in analyses. \n",
                "\n",
                "Please note that this module does not include MedDRA distribution files. \n",
                "MedDRA data sharing follows data share statement published by MSSO[^3]. \n",
                "The users can download distribution files from the MedDRA website. \n",
                "Please note that some extra columns included in files distributed before March 2012 (Version 15.0) will not be processed by this module.\n",
                "\n",
                "For demonstration purpose, an example distribution folder is shipped with this module. The example folder includes randomly generated strings and numbers following MedDRA distribution format in Version 26.1 to demonstrate the usage of this module. The numbers of terms are also reduced for faster results.\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Assign MedDRA Distribution Folder\n",
                "\n",
                "To use downloaded MedDRA distribution files, assign `folder_name` to the relative or exact path of the unzipped folder.\n",
                "If the `folder_name` remains empty, then the name will be assigned to the example folder. \n",
                "\n",
                "To check if necessary files are found:"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "from mtbp3.health.emt import Emt\n",
                "\n",
                "emt = Emt(folder_name='')\n",
                "print(emt.find_files())"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Please note that having the \"all files found\" response from `find_files` is required for using the following steps."
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\n",
                "## Find MedDRA Terms Within a Given Hierarchical Level\n",
                "\n",
                "MedDRA terms are organized in a hierarchical system: **SOC**, HLGT, HLT, **PT**, LLT. Two most commonly used levels for analyses are SOC and PT. \n",
                "Note that the MedDRA terms do use both capital letters and lowercase letters. The outputs will follow the exact letters used in the distribution folder. \n",
                "Functions in this section return a list for faster follow-up processing.\n",
                "\n",
                "To find a list of SOC:"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "soc_names = emt.find_soc()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "If a list of SOC terms are given to the function `find_soc`, the function will return the corresponding list of id, and vice versa.  \n",
                "\n",
                "To find the id of a given list of SOC term(s):"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "id = emt.find_soc(soc_names[:3])\n",
                "print(id)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "If the input SOC string may have letter cases changed, use the option `ignore_case` to find id:"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "id = emt.find_soc([name.upper() for name in soc_names[:3]], ignore_case=True)\n",
                "print(id)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "If the input can not be found in the current version, the output will remain empty as:"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "id = emt.find_soc(soc_names[:3]+['This is not a standard term!'])\n",
                "print(id)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Similar finding functions for HLGT, HLT, PT, and LLT are included in this module. Simply replace `find_soc` to `find_pt`, etc. "
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Find MedDRA Terms Across Different Hierarchical Levels"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Functions in this sections return DataFrames.\n",
                "\n",
                "To find a list of PTs related to the first SOC on the list:"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "df = emt.find_pt_given_soc(soc_names[0])\n",
                "\n",
                "# To save the df to a CSV file:\n",
                "# df.to_csv('filename.csv', index=False)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Please note that the default returned output includes PT with the specified SOC as both primary and non-primary SOC.\n",
                "Add the option `primary_soc_only=True` to get primary only results. Other across level functions are also available, including `find_llt_given_pt`, `find_llt_given_soc`, `find_soc_given_pt`, etc."
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Other Options\n",
                "\n",
                "MedDRA also provides other options including online viewer, desktop browser [^4], and API access[^5]. Please visit MedDRA website for more information. Another Python module for multiple medical term systems is also available [^6]."
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Reference\n",
                "\n",
                "[^1]: ICH. (2013). Understanding MedDRA. ([pdf](https://admin.meddra.org/sites/default/files/page/documents_insert/meddra2013_0.pdf))\n",
                "[^2]: Dutta, A. (2020). MedDRA - Terminologies & Coding. ([pdf](https://meddra.org/sites/default/files/page/documents_insert/meddra_-_terminologies_coding.pdf))\n",
                "[^3]: ICH. (year). MedDRA Data Sharing Statement. ([pdf](https://admin.meddra.org/sites/default/files/page/documents/000198%20Statement%20on%20MedDRA%20Data%20Sharing.pdf))\n",
                "[^4]: ICH, MedDRA browsers. ([webpage](https://www.meddra.org/browsers))\n",
                "[^5]: Jasonpott. (2023). MEDDRA API with R. ([GitHub Repository](https://github.com/jasonpott/meddra_api_R))\n",
                "[^6]: Lamy JB, Venot A, Duclos C. PyMedTermino: an open-source generic API for advanced terminology services. Stud Health Technol Inform 2015;210:924-928 ([webpage](https://pythonhosted.org/PyMedTermino/))\n",
                "\n",
                "\n",
                "\n",
                "\n",
                "\n"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.12.1"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4
}
